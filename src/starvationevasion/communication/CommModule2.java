package starvationevasion.communication;

import starvationevasion.server.model.Type;

/**
 * Implements Communication interface.
 *
 * @author: Justin Hall, George Boujaoude
 */
public class CommModule2 implements Communication
{
  /**
   * This method takes an unspecified number of arguments. When called, these arguments form
   * the data that will be packaged up and sent over the network to the server.
   *
   * @param data Data to package and send to the server. Format for data ::
   *             <p>
   *             data[0] should always contain the current time (will be parsed as a double)
   *             <p>
   *             data[1] should contain the endpoint as a String (see starvationevasion.server.model.Endpoint)
   *             - the server interprets each in a specific way
   *             <p>
   *             data[2] this is not specifically required, but depending on the Endpoint you used, it
   *             may be needed - if the comment above the enum says "No Payload", data[2] isn't
   *             needed
   * @return true if the request was successful and false if not
   */
  @Override
  public boolean send(String ... data)
  {
    return false;
  }

  /**
   * Note :: No responses should be pushed to their respective listeners until an external source
   * (Ex: AI/UI client) requests that the Communication module do so. This avoids the issue
   * of requiring these listeners to be thread-safe. See pushResponseEvents().
   * <p>
   * This binds a response listener to a type. The type represents one of the possible responses that
   * can be generated by the server and pushed to a Communication module. These responses often
   * contain data from the server, so the listener itself will receive this data so that it can
   * push it to whoever needs it. For example, if the type was USER, it means that the server has just
   * sent an entire serialized User over the network (it can be cast directly to a User object).
   *
   * @param type     type to listen for
   * @param listener listener to bind to - see starvationevasion.communication.ResponseListener
   */
  @Override
  public void setResponseListener(Type type, ResponseListener listener)
  {

  }

  /**
   * When this is called, the entire list of response events that were sent from the server since the last
   * time this was called will be pushed to their listeners (if no listener was bound, these events
   * should be shelved until a listener is bound).
   * <p>
   * A good data structure to consider about for this is a FIFO list so that older events are processed
   * first, and newer commands are processed last in case they need to override/alter the outcome
   * of the older events.
   */
  @Override
  public void pushResponseEvents()
  {

  }

  /**
   * Disposes of this module. All existing threads should be shut down and data cleared out.
   * <p>
   * The object is not meant to be used in any way after this is called.
   */
  @Override
  public void dispose()
  {

  }
}
