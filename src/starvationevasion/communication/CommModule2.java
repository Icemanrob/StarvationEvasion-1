package starvationevasion.communication;

import starvationevasion.common.EnumRegion;
import starvationevasion.server.model.Endpoint;
import starvationevasion.server.model.Response;
import starvationevasion.server.model.Sendable;
import starvationevasion.server.model.Type;

import java.util.ArrayList;

/**
 * TODO refactor original comm
 */
public class CommModule2 implements Communication
{
  /**
   * This gets the starting nano time that was received from the server. Note that server responses
   * of type TIME include this data, but this means that no listener needs to be bound to this type
   * as the Communication module will manage this itself.
   *
   * @return starting nano time from the server
   */
  @Override
  public double getStartNanoTime()
  {
    return 0;
  }

  /**
   * Returns the current connection state of the module. If at any point the module loses connection
   * with the server, this will return false.
   *
   * @return true if connected to the server and false if not
   */
  @Override
  public boolean isConnected()
  {
    return false;
  }

  /**
   * Attempts to send a new login request to the server with the given information.
   *
   * @param username username as a string
   * @param password password as a string
   * @param region   region associated with the logging-in user
   * @return true if the request succeeded in sending and false if not (NOTE :: This *does not* reflect
   * the status of the login - only whether the request was sent or not)
   */
  @Override
  public boolean login(String username, String password, EnumRegion region)
  {
    return false;
  }

  /**
   * Note :: Check the Endpoint that you are using before you set data to null - some are safe
   * to use without extra data associate with them while some are not (If they say "No Payload"
   * with their comment block, it should be fine to not include extra data). See
   * starvationevasion.server.model.Endpoint for more information.
   * <p>
   * Attempts to send a new request to the server tagged with the given endpoint. The "data" field
   * is potentially optional, while the "message" field is entirely optional. Put null for both of
   * these if you do not wish to use them.
   *
   * @param endpoint endpoint to tag the request with
   * @param data     Sendable object to attach to the request - the most common type for this is Payload
   *                 (see starvationevasion.server.model.Payload for more information)
   * @param message  optional message to attach - this *must* be null if data is also null
   * @return true if the request was sent successfully and false if anything went wrong
   */
  @Override
  public boolean send(Endpoint endpoint, Sendable data, String message)
  {
    return false;
  }

  /**
   * This function attempts to send a new chat request to the server. Note that for destination,
   * the only two types that can be placed here (at the moment) are String and EnumRegion.
   * <p>
   * The "data" field is for attaching extra data to the chat request. At the moment the only
   * supported type is PolicyCard.
   *
   * @param destination where to send the chat
   * @param text        chat text
   * @param data        extra data (optional - can be null)
   * @return true if the request succeeded and false if anything went wrong
   */
  @Override
  public <T, E> boolean sendChat(T destination, String text, E data)
  {
    return false;
  }

  /**
   * Note :: No responses should be pushed to their respective listeners until an external source
   * (Ex: AI/UI client) requests that the Communication module do so. This avoids the issue
   * of requiring these listeners to be thread-safe. See pushResponseEvents().
   * <p>
   * This binds a response listener to a type. The type represents one of the possible responses that
   * can be generated by the server and pushed to a Communication module. These responses often
   * contain data from the server, so the listener itself will receive this data so that it can
   * push it to whoever needs it. For example, if the type was USER, it means that the server has just
   * sent an entire serialized User over the network (it can be cast directly to a User object).
   *
   * @param type     type to listen for
   * @param listener listener to bind to - see starvationevasion.communication.ResponseListener
   */
  @Override
  public void setResponseListener(Type type, ResponseListener listener)
  {

  }

  /**
   * When this is called, the entire list of response events that were sent from the server since the last
   * time this was called will be pushed to their listeners (if no listener was bound, these events
   * should be shelved until a listener is bound).
   * <p>
   * A good data structure to consider about for this is a FIFO list so that older events are processed
   * first, and newer commands are processed last in case they need to override/alter the outcome
   * of the older events.
   */
  @Override
  public void pushResponseEvents()
  {

  }

  @Override
  public ArrayList<Response> peekMessages()
  {
    return null;
  }

  @Override
  public ArrayList<Response> pullMessages()
  {
    return null;
  }

  /**
   * Disposes of this module. All existing threads should be shut down and data cleared out.
   * <p>
   * The object is not meant to be used in any way after this is called.
   */
  @Override
  public void dispose()
  {

  }
}
